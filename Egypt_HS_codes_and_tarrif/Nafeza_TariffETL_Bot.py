"""API_hit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ea6O5F_d93aHb9ZvTR8nDdUAMHBYQ0Ot
"""

##!pip install pyppeteer

##!pip install openpyxl

import asyncio
import os
from pyppeteer import launch
import pandas as pd
from bs4 import BeautifulSoup
import random
import nest_asyncio
import platform

# Apply nest_asyncio for Jupyter environments
nest_asyncio.apply()

# List of HS codes
hs_codes = [
    "0204500000", "0205000000", "0207110000", "0302990000", "0303920000",
    "0309100000", "0309900010", "0309900020", "0309900030", "0309900040",
    "0309900050", "0309900060", "0309900070", "0309900080", "0309900090",
    "0402211000", "0402219900", "0402291000", "0402292000", "0402299900",
    "0402911100", "0402911900", "0403200000", "0403900000", "0404901000",
    "0404909000", "0405101000", "0405109000", "0405201000", "0405209000",
    "0406901020", "0406901040", "0406901060", "0406909010", "0406909090",
    "0410100000", "0410900010", "0410900090", "0511991000", "0511999010",
    "0511999020", "0511999030", "0511999040", "0511999050", "0511999060",
    "0511999070", "0511999080", "0511999090", "0703209010", "0703209090",
    "0709520000", "0709530000", "0709540000", "0709550000", "0709560000",
    "0712340000", "0802910000", "0802920000", "0802990010", "0802990090",
    "1102200000", "1208900050", "1208900070", "1211600000", "1211600010",
    "1211600090", "1212990050", "1509200000", "1509201000", "1509209000",
    "1509300000", "1509301000", "1509309000", "1509400000", "1509401000",
    "1509409000", "1509900000", "1509901000", "1510100000", "1510101000",
    "1510109000", "1510901000", "1510909000", "1513191010", "1513191090",
    "1513199010", "1513199090", "1515600000", "1515901010", "1515901090",
    "1515909010", "1515909090", "1516201020", "1516201050", "1516300000",
    "1517909100", "1517909900", "1518000000", "1521900050", "1901909050",
    "1905909020", "1905909090", "2008991010", "2008991090", "2008999010",
    "2008999090", "2009890025", "2009901000", "2009909000", "2309901015",
    "2309901020", "2309901025", "2309901085", "2309909015", "2309909025",
    "2309909030", "2309909035", "2309909050", "2309909070", "2309909080",
    "2309909085", "2309909086", "2309909087", "2309909089", "2402901000",
    "2403190050", "2403999020", "2404110000", "2404120010", "2404120090",
    "2404190010", "2404190020", "2404190090", "2404910000", "2404920000",
    "2404990000", "2710190035", "2710190045", "2711190050", "2836309010",
    "2836309090", "2844410000", "2844420000", "2844430000", "2844440000",
    "2845200000", "2845300000", "2845400000", "2902901000", "2902909000",
    "2903410000", "2903420000", "2903430010", "2903430090", "2903440000",
    "2903450000", "2903460010", "2903460090", "2903470010", "2903470090",
    "2903480010", "2903480090", "2903490000", "2903510010", "2903510090",
    "2903590000", "2903610010", "2903610090", "2903620000", "2903690000",
    "2909200010", "2909200090", "2909300010", "2909300090", "2910500000",
    "2918990010", "2918990050", "2918990090", "2930100000", "2931410000",
    "2931420000", "2931430000", "2931440000", "2931450000", "2931460000",
    "2931470000", "2931480000", "2931490000", "2931510000", "2931520000",
    "2931530000", "2931540000", "2931590000", "2932960000", "2933340000",
    "2933350000", "2933360000", "2933370000", "2933690010", "2933690020",
    "2933690050", "2933690090", "2933990010", "2933990050", "2933990090",
    "2934920000", "2935400000", "2939450000", "2939720010", "2939720090",
    "3001901000", "3002410000", "3002420000", "3002490000", "3002510000",
    "3002590000", "3003201000", "3003209000", "3003311000", "3003319000",
    "3003391000", "3003399000", "3003411000", "3003419000", "3003421000",
    "3003429000", "3003431000", "3003439000", "3003491000", "3003499000",
    "3003601000", "3003609000", "3003901000", "3004101000", "3004109000",
    "3004201000", "3004209000", "3004311000", "3004319000", "3004321000",
    "3004329000", "3004391000", "3004399000", "3004411000", "3004419000",
    "3004421000", "3004429000", "3004431000", "3004439000", "3004491000",
    "3004499000", "3004501000", "3004509000", "3004601000", "3004609000",
    "3004901000", "3006930000", "3204180000", "3302101000", "3307901000",
    "3401202000", "3401209000", "3402310010", "3402310090", "3402390010",
    "3402390090", "3402410010", "3402410090", "3402420010", "3402420090",
    "3402490010", "3402490090", "3402500010", "3402500020", "3402500050",
    "3402500090", "3403111000", "3403119000", "3403191000", "3403199000",
    "3403911000", "3403919000", "3403991000", "3403999000", "3503001020",
    "3504001000", "3504009015", "3504009030", "3504009090", "3603100000",
    "3603200000", "3603300000", "3603400000", "3603500000", "3603600000",
    "3701309000", "3701999000", "3702521000", "3702522000", "3702529000",
    "3702551000", "3702559000", "3702561000", "3702569000", "3702971000",
    "3702979000", "3702981000", "3702989000", "3703109000", "3703209000",
    "3703909000", "3705001000", "3705009000", "3706101000", "3706109000",
    "3706901000", "3706909000", "3808521000", "3808529000", "3808591000",
    "3808599000", "3808611000", "3808619000", "3808621000", "3808629000",
    "3808691000", "3808699000", "3808911010", "3808911090", "3808919010",
    "3808919020", "3808919090", "3808921000", "3808929000", "3808991000",
    "3808999000", "3810100000", "3822110000", "3822120000", "3822130000",
    "3822190000", "3822900000", "3824890000", "3824920000", "3827110000",
    "3827120000", "3827130000", "3827140000", "3827200000", "3827310000",
    "3827320000", "3827390000", "3827400000", "3827510000", "3827590000",
    "3827610000", "3827620000", "3827630000", "3827640000", "3827650000",
    "3827680000", "3827690000", "3827900000", "3901201000", "3901209000",
    "3902101000", "3902109000", "3904221000", "3904229000", "3907210010",
    "3907210090", "3907290010", "3907290090", "3907500010", "3907500090",
    "3909401000", "3911200000", "3912209000", "3917399070", "3917401010",
    "3917401090", "3919901010", "3919901090", "3919909010", "3919909090",
    "3920101000", "3920511000", "3920519000", "3920621000", "3920629000",
    "3921121000", "3921129000", "3921191000", "3921199000", "3921901000",
    "3921909060", "3923211000", "3923219010", "3923219050", "3923219090",
    "3923291000", "3923299010", "3923299090", "3926201050", "3926209000",
    "3926301000", "3926309000", "3926902000", "3926903000", "3926904000",
    "3926906000", "3926907000", "3926909015", "3926909055", "3926909070",
    "3926909086", "4011101000", "4011109000", "4015120000", "4016101000",
    "4016921000", "4016929000", "4016991000", "4016992000", "4016993000",
    "4016999050", "4104111000", "4104191000", "4104199000", "4203101000",
    "4203102000", "4203109000", "4203291000", "4203299000", "4203401000",
    "4203402000", "4206001000", "4206009000", "4401320000", "4401410000",
    "4401490000", "4402200000", "4403420000", "4407130000", "4407140000",
    "4407230000", "4412410000", "4412420000", "4412490000", "4412510000",
    "4412520000", "4412590000", "4412910000", "4412920000", "4414100000",
    "4414900000", "4418110000", "4418190000", "4418210000", "4418290000",
    "4418300000", "4418810000", "4418820000", "4418830000", "4418890000",
    "4418920000", "4419200000", "4420110000", "4420190000", "4421200000",
    "4421991010", "4421991090", "4421999010", "4421999020", "4421999030",
    "4421999050", "4421999090", "4818101000", "4818901000", "4818909000",
    "4819201010", "4819201090", "4819209010", "4819209090", "4823701000",
    "4905200000", "4905900000", "4911100000", "4911999000", "5402491000",
    "5402499000", "5501110000", "5501190000", "5703210000", "5703290000",
    "5703310000", "5703390000", "5802100000", "5810101000", "5901901000",
    "5901909000", "6107920000", "6113001000", "6113009000", "6114301000",
    "6114309000", "6116101000", "6116109000", "6201200000", "6201300000",
    "6201400000", "6201900000", "6202200000", "6202300000", "6202400000",
    "6202900000", "6210101000", "6210109000", "6210201000", "6210209000",
    "6210301000", "6210309000", "6210401000", "6210409000", "6210501000",
    "6210509000", "6211391000", "6211399000", "6211491000", "6211499000",
    "6212201000", "6212209010", "6212209090", "6212901000", "6212909000",
    "6307901000", "6307902020", "6307903000", "6307909050", "6406901000",
    "6406909000", "6506109000", "6815110000", "6815120000", "6815130000",
    "6815190000", "6902101000", "6902109000", "6902201000", "6902202000",
    "6902209000", "6902901000", "6902902000", "6902909000", "6903201000",
    "6903209000", "7013991000", "7013999010", "7013999090", "7017101000",
    "7017109000", "7019130000", "7019140000", "7019150000", "7019610000",
    "7019620000", "7019630010", "7019630020", "7019630090", "7019640010",
    "7019640020", "7019640090", "7019650000", "7019660000", "7019690010",
    "7019690090", "7019710000", "7019720000", "7019730000", "7019800010",
    "7019800090", "7104210000", "7104290000", "7104910000", "7104990000",
    "7106921000", "7106929000", "7117191000", "7117199000", "7117901000",
    "7117909000", "7118101000", "7118109000", "7118901000", "7118909000",
    "7217101000", "7217109000", "7217301000", "7217309000", "7308901000",
    "7308909000", "7311001000", "7312101000", "7312109000", "7312901000",
    "7312909000", "7317001000", "7319901000", "7319909000", "7323931000",
    "7324901000", "7326901000", "7326902000", "7326903000", "7419200000",
    "7419801010", "7419801090", "7419802000", "7419803000", "7419804000",
    "7419805000", "7419809010", "7419809020", "7419809050", "7419809060",
    "7419809090", "7508901000", "7508902010", "7508902090", "7508903000",
    "7608101000", "7608109000", "7608201000", "7608209000", "7612901000",
    "7615201000", "7615209010", "7615209090", "7616991000", "8103910000",
    "8103990000", "8106100010", "8106100020", "8106100090", "8106901000",
    "8106902000", "8106909000", "8109210000", "8109290000", "8109310000",
    "8109390000", "8109910000", "8109990000", "8111001000", "8111002000",
    "8111009000", "8112311000", "8112319000", "8112390000", "8112411000",
    "8112419000", "8112490000", "8112610000", "8112691000", "8112699000",
    "8112921000", "8112929000", "8113001000", "8113002000", "8113009000",
    "8208901000", "8208909000", "8212101000", "8212109000", "8212201000",
    "8212202000", "8212203000", "8301401000", "8301409000", "8301601000",
    "8301609000", "8408201000", "8413702000", "8414301000", "8414700010",
    "8414700020", "8414700090", "8415901000", "8415909050", "8418501000",
    "8418502000", "8418691000", "8418692100", "8418692900", "8418693000",
    "8418699070", "8419120000", "8419190000", "8419330000", "8419340000",
    "8419350000", "8421190010", "8421190090", "8421211000", "8421219100",
    "8421219910", "8421219990", "8421291000", "8421299010", "8421299090",
    "8421320000", "8421911000", "8421919000", "8424410000", "8424490000",
    "8424820010", "8424820020", "8424820050", "8424820090", "8428700000",
    "8431319000", "8432310000", "8432390000", "8432410000", "8432420000",
    "8456110000", "8456120000", "8456400000", "8456500000", "8459410000",
    "8459490000", "8460120000", "8460220000", "8460230000", "8460240000",
    "8462110000", "8462190000", "8462220000", "8462230000", "8462240000",
    "8462250000", "8462260010", "8462260090", "8462320010", "8462320090",
    "8462330000", "8462420000", "8462510010", "8462510090", "8462590000",
    "8462610010", "8462610090", "8462620010", "8462620090", "8462630010",
    "8462630090", "8462690010", "8462690090", "8462900010", "8462900090",
    "8465200000", "8472901000", "8472909000", "8479830000", "8479890010",
    "8479890050", "8479890090", "8481801000", "8481802010", "8481802090",
    "8481809070", "8483101000", "8483201000", "8483209000", "8483301000",
    "8483309000", "8483401000", "8483409000", "8483501000", "8483509000",
    "8483601000", "8483609000", "8483901000", "8483909000", "8485100000",
    "8485200000", "8485300000", "8485800000", "8485900010", "8485900090",
    "8501401000", "8501402000", "8501511000", "8501512000", "8501519000",
    "8501710000", "8501720000", "8501800000", "8503001000", "8503002100",
    "8503002200", "8503002900", "8504101000", "8504401000", "8504402000",
    "8504409010", "8504409090", "8507901000", "8507909000", "8508701010",
    "8508701090", "8508709000", "8514110000", "8514190010", "8514190090",
    "8514310000", "8514320000", "8514390010", "8514390090", "8517130000",
    "8517140010", "8517140020", "8517140090", "8517710010", "8517710090",
    "8517790010", "8517790020", "8517790090", "8518101010", "8518101090",
    "8518109010", "8518109090", "8518291000", "8518299010", "8518299090",
    "8518301010", "8518301090", "8518309020", "8518309050", "8518309070",
    "8519891000", "8519892000", "8519899010", "8519899090", "8522901000",
    "8522902000", "8522909000", "8524110010", "8524110090", "8524120010",
    "8524120090", "8524190000", "8524190010", "8524190090", "8524911000",
    "8524912000", "8524919010", "8524919090", "8524921000", "8524922000",
    "8524929010", "8524929090", "8524991000", "8524992000", "8524999010",
    "8524999090", "8525810010", "8525810090", "8525820010", "8525820090",
    "8525830010", "8525830090", "8525891000", "8525899010", "8525899020",
    "8525899050", "8525899070", "8525899090", "8528711010", "8528711090",
    "8528719010", "8528719090", "8529109000", "8529901000", "8529902000",
    "8531901000", "8535101000", "8535109000", "8535219000", "8535309000",
    "8536101000", "8536109000", "8536502000", "8536503000", "8536504000",
    "8536901000", "8536902000", "8536909000", "8537101000", "8537109000",
    "8537201000", "8537209010", "8537209050", "8537209090", "8539221000",
    "8539410000", "8539510010", "8539510090", "8539521000", "8539529010",
    "8539529020", "8539529090", "8539901000", "8539909000", "8541410000",
    "8541420000", "8541430000", "8541490000", "8541510000", "8541590000",
    "8543400010", "8543400090", "8543709020", "8543709085", "8543709086",
    "8544111000", "8544209020", "8544429050", "8544491000", "8546201000",
    "8546209000", "8546901000", "8546909000", "8547101000", "8547109000",
    "8548000000", "8549110000", "8549120000", "8549130000", "8549140000",
    "8549190000", "8549210000", "8549290000", "8549310000", "8549390000",
    "8549910000", "8549990000", "8701210010", "8701210090", "8701220010",
    "8701220090", "8701230010", "8701230090", "8701240010", "8701240090",
    "8701290010", "8701290090", "8703221010", "8703221090", "8703222000",
    "8703223010", "8703223090", "8703231010", "8703231090", "8703232000",
    "8703233000", "8703234010", "8703234020", "8703234090", "8703241010",
    "8703241090", "8703242000", "8703243000", "8703311010", "8703311090",
    "8703312020", "8703321010", "8703321090", "8703322000", "8703323000",
    "8703331010", "8703331090", "8703332000", "8703401010", "8703401090",
    "8703409010", "8703409090", "8703501010", "8703501090", "8703509010",
    "8703509090", "8703601010", "8703601090", "8703609010", "8703609090",
    "8703701010", "8703701090", "8703709010", "8703709090", "8703901010",
    "8703901090", "8703902000", "8703903010", "8703903090", "8704212000",
    "8704312000", "8704410010", "8704410090", "8704420010", "8704420050",
    "8704420090", "8704430010", "8704430090", "8704510010", "8704510090",
    "8704520010", "8704520090", "8704600010", "8704600090", "8708220000",
    "8708501000", "8708509010", "8708509090", "8708701000", "8708709010",
    "8708709090", "8708801000", "8708809000", "8708911000", "8708919000",
    "8708921000", "8708929000", "8708931000", "8708991000", "8708999075",
    "8716801000", "8716809000", "8806100010", "8806100090", "8806210000",
    "8806220000", "8806230000", "8806240000", "8806290010", "8806290090",
    "8806910000", "8806920000", "8806930000", "8806940000", "8806990010",
    "8806990090", "8807100000", "8807200000", "8807300000", "8807900000",
    "8903110000", "8903120000", "8903190000", "8903210000", "8903220000",
    "8903230000", "8903310000", "8903320000", "8903330000", "8903930000",
    "9006531000", "9018901000", "9018909110", "9018909120", "9018909190",
    "9018909910", "9018909930", "9018909935", "9018909940", "9018909950",
    "9018909960", "9018909970", "9018909975", "9018909980", "9018909985",
    "9018909989", "9018909990", "9027810000", "9027890010", "9027890090",
    "9027901000", "9027909020", "9030901000", "9030902000", "9030909000",
    "9031901000", "9031909000", "9306301000", "9306309100", "9306309900",
    "9306901000", "9306909000", "9401310010", "9401310090", "9401390000",
    "9401410010", "9401410090", "9401490000", "9401801000", "9401910000",
    "9401990000", "9403101000", "9403109000", "9403201010", "9403201090",
    "9403209010", "9403209090", "9403910000", "9403991000", "9403999000",
    "9404400000", "9405110010", "9405110050", "9405110090", "9405190000",
    "9405210000", "9405290000", "9405310000", "9405390000", "9405410000",
    "9405420000", "9405491000", "9405492000", "9405499010", "9405499090",
    "9405610000", "9405691000", "9405699000", "9406200000", "9602001000",
    "9602009020", "9608101000", "9608109010", "9608109090", "9613809000",
    "9701210000", "9701220000", "9701290000", "9701910000", "9701920000",
    "9701990000", "9702100000", "9702900000", "9703100010", "9703100090",
    "9703900000", "9705100000", "9705210000", "9705220000", "9705290000",
    "9705310000", "9705390000", "9706100000", "9706900000", "9801001010",
    "9801001020", "9801001030", "9801001040", "9801001090", "9801002010",
    "9801002020", "9801002030", "9801002040", "9801002090", "9801003010",
    "9801003020", "9801003030", "9801003040", "9801003090", "9801004010",
    "9801004020", "9801004030", "9801004040", "9801004090", "9801005010",
    "9801005020", "9801005030", "9801005040", "9801005090", "9801006010",
    "9801006020", "9801006030", "9801006040", "9801006090", "9901011010",
    "9901011050", "9901011090", "9990100010", "9999998070", "9999998080",
    "9999999021", "9999999030", "9999999040", "9999999050", "9999999060",
    "9999999071", "9999999077", "9999999080"
]

base_url = "https://www.nafeza.gov.eg/web/en/api/tarrif/details?code="

async def scrape_hs_code(hs_code, browser):
    try:
        # Create new page
        page = await browser.newPage()

        # Set realistic headers
        await page.setUserAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36")
        await page.setExtraHTTPHeaders({
            'Accept-Language': 'en-US,en;q=0.9',
            'Referer': 'https://www.nafeza.gov.eg/',
        })

        # Random delay
        await asyncio.sleep(random.uniform(1, 3))

        # Navigate to URL
        url = base_url + hs_code
        await page.goto(url, {'waitUntil': 'networkidle2', 'timeout': 60000})

        # Wait for content
        try:
            await page.waitForFunction('''() => {
                return document.body.innerText.includes('<response>') ||
                       document.body.innerText.includes('Code');
            }''', timeout=30000)
        except:
            pass  # Continue even if wait fails

        # Get page content
        content = await page.content()

        # Parse the response
        data = parse_response(content)

        return {
            "HS_Code": hs_code,
            "Description": data.get('Description'),
            "Import_Tax_Basic": data.get('Import_Tax_Basic', 'N/A'),
            "Import_Tax_EFTA": data.get('Import_Tax_EFTA', 'N/A'),
            "VAT": data.get('VAT', 'N/A'),
            "Status": "Success"
        }

    except Exception as e:
        return {
            "HS_Code": hs_code,
            "Description": None,
            "Import_Tax_Basic": 'N/A',
            "Import_Tax_EFTA": 'N/A',
            "VAT": 'N/A',
            "Status": f"Error: {str(e)}"
        }
    finally:
        await page.close()

def parse_response(content):
    """Parse the API response from page content"""
    soup = BeautifulSoup(content, 'html.parser')
    response = soup.find('response') or soup

    data = {
        'Code': None,
        'Description': None,
        'Import_Tax_Basic': 'N/A',
        'Import_Tax_EFTA': 'N/A',
        'VAT': 'N/A'
    }

    # Extract basic info
    if response.find('code'):
        data['Code'] = response.find('code').text
    if response.find('description'):
        data['Description'] = response.find('description').text

    # Extract all tax information
    for item in response.find_all('item'):
        account_name = item.find('accountname')
        if not account_name:
            continue

        account_name_text = account_name.text
        desc = item.find('description')
        description_text = desc.text if desc else 'N/A'

        if 'ضريبة قيمه مضافه' in account_name_text:  # VAT
            data['VAT'] = description_text
        elif 'ضريبة الوارد' in account_name_text:
            rcb_name = item.find('rcbname')
            if rcb_name and 'الافتا' in rcb_name.text:  # EFTA
                data['Import_Tax_EFTA'] = description_text
            else:  # Basic System
                data['Import_Tax_Basic'] = description_text

    return data

async def get_browser():
    """Get browser instance with proper Chromium download"""
    # Set environment variable to use local Chrome if available
    if platform.system() == "Windows":
        chrome_path = "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"
    else:
        chrome_path = "/usr/bin/google-chrome"

    if os.path.exists(chrome_path):
        return await launch(
            executablePath=chrome_path,
            headless=True,
            args=[
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-infobars',
                '--window-position=0,0',
                '--ignore-certificate-errors',
                '--ignore-certificate-errors-spki-list',
                '--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36'
            ],
            ignoreHTTPSErrors=True
        )
    else:
        # Fallback to downloading Chromium
        return await launch(
            headless=True,
            args=[
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-infobars',
                '--window-position=0,0',
                '--ignore-certificate-errors',
                '--ignore-certificate-errors-spki-list',
                '--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36'
            ],
            ignoreHTTPSErrors=True,
            chromiumRevision='818858'
        )

async def main():
    # Get browser instance
    browser = await get_browser()

    results = []
    for i, code in enumerate(hs_codes):
        print(f"Processing {i+1}/{len(hs_codes)}: {code}")
        result = await scrape_hs_code(code, browser)
        results.append(result)

        # Save progress
        pd.DataFrame(results).to_excel('hs_code_results.xlsx', index=False)

        # # Random delay
        # if i < len(hs_codes) - 1:
        #     delay = random.uniform(3, 8)
        #     print(f"Waiting {delay:.1f} seconds...")
        #     #await asyncio.sleep(delay)

    await browser.close()
    return results

# Run the scraper
def run_scraper():
    loop = asyncio.get_event_loop()
    return loop.run_until_complete(main())

if __name__ == '__main__':
    # First install required packages if not already installed
    required_packages = ['pyppeteer', 'pandas', 'bs4', 'nest_asyncio']

    import subprocess
    import sys

    for package in required_packages:
        try:
            __import__(package)
        except ImportError:
            print(f"Installing {package}...")
            subprocess.check_call([sys.executable, "-m", "pip", "install", package])

    # Now run the scraper
    results = run_scraper()
    df = pd.DataFrame(results)
    print(df[['HS_Code', 'Import_Tax_Basic', 'Import_Tax_EFTA', 'VAT', 'Status']])
    df.to_excel('final_hs_code_results_from_api.xlsx', index=False)



