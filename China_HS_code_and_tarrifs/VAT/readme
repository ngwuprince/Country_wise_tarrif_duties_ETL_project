# **Web Scraper Documentation: HS Code & VAT Rate Extraction**

## **Overview**
This Python script automates the extraction of **HS Codes** (Harmonized System Codes) and their corresponding **Import VAT Rates** from the [TransCustoms](https://www.transcustoms.com) website. The process is divided into three stages:

1. **Extract HS Headings**: Scrapes the main HS Code tree to get a list of 4-digit HS headings.
2. **Fetch All 10-Digit HS Codes**: For each heading, queries paginated results to collect all 10-digit HS codes.
3. **Retrieve VAT Rates**: For each HS code, fetches the associated Import VAT rate and exports the data to a CSV file.

---

## **Requirements**
- **Python 3.8+**
- Libraries:
  - `requests` (HTTP requests)
  - `BeautifulSoup` (HTML parsing)
  - `re` (regex for pattern matching)
  - `pandas` (data storage in CSV)
  - `time.sleep` (rate-limiting)

Install dependencies:
```bash
pip install requests beautifulsoup4 pandas
```

---

## **Workflow Breakdown**

### **1. Extract HS Headings (4-Digit)**
- **Source URL**: [https://www.transcustoms.com/HS_tree.htm](https://www.transcustoms.com/HS_tree.htm)
- **Method**:  
  - Fetches the webpage and extracts all text.
  - Uses regex (`Heading (\d{4}):`) to identify HS headings.
  - Removes duplicates and sorts the list.

**Output Example**:
```
Extracted HS Headings: ['0101', '0102', '0103', ...]
```

---

### **2. Scrape All 10-Digit HS Codes**
- **Base URL**: `https://www.transcustoms.com/Hscode/HScode_search.asp?word={heading}&selectT=&page={page}`
- **Logic**:
  - For each 4-digit heading, checks pages `0` to `4`.
  - Stops early if no HS codes are found on a page (optimization).
  - Collects all unique 10-digit HS codes (`\b\d{10}\b`).

**Output Example**:
```
Heading 0101: Found 15 HS codes  
Heading 0102: Found 8 HS codes  
...
Total unique HS codes: 230
```

---

### **3. Fetch VAT Rates & Export to CSV**
- **VAT Lookup URL**: `https://www.transcustoms.com/China_HS_Code/China_Tariff.asp?HS_Code={hs_code}`
- **Method**:
  - For each HS code, extracts the **Import VAT (Value-Added Tax)** from the page.
  - Handles missing VAT rates gracefully (`"Not Found"`).
  - Stores results in a `pandas.DataFrame` and exports to `hs_codes_vat_rates.csv`.

**CSV Output Structure**:
| HS_Code      | VAT_Rate |
|--------------|----------|
| 0101210010   | 13%      |
| 0101210090   | 9%       |
| ...          | ...      |

---

## **Error Handling & Rate Limiting**
- **HTTP Errors**:  
  - `response.raise_for_status()` ensures failed requests raise exceptions.
- **Missing Data**:  
  - If no HS codes are found on a page, skips remaining pages.
  - If VAT rate is missing, logs `"Not Found"`.
- **Anti-Scraping Measures**:  
  - Uses `User-Agent` headers to mimic a browser.
  - Adds `sleep(1)` between requests to avoid rate-limiting.

---

## **Usage Instructions**
1. **Run Cell 1**: Extracts HS headings.
2. **Run Cell 2**: Fetches all 10-digit HS codes.
3. **Run Cell 3**: Retrieves VAT rates and saves to CSV.

**Debugging Tips**:
- If a request fails, check:
  - Network connectivity.
  - Website structure changes (update selectors if needed).
- If VAT rates are missing, verify the HS code exists on the target page.

---

## **Legal & Ethical Considerations**
- **Compliance**:  
  - Check `robots.txt` ([TransCustoms/robots.txt](https://www.transcustoms.com/robots.txt)) before scraping.
  - Do not overload the server; use delays (`sleep`).
- **Data Usage**:  
  - Intended for **educational/personal use only**.
  - Commercial use may require permission.

---

## **Future Improvements**
- **Parallel Processing**: Use `concurrent.futures` for faster VAT scraping.
- **Retry Mechanism**: Implement retries for failed requests.
- **Database Integration**: Store results in SQLite/PostgreSQL instead of CSV.

---
**Author**: [Ogbonna Ngwu]  
**Last Updated**: [3rd April, 2025]  

This documentation ensures clarity, reproducibility, and maintainability of the scraper. ðŸš€
