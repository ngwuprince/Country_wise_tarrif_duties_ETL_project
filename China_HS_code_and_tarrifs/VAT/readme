```markdown
# HS Code & VAT Rate Scraper

A Python script that automates the extraction of **HS Codes** (Harmonized System Codes) and their corresponding **Import VAT Rates** from [TransCustoms](https://www.transcustoms.com).

## Features
- Extracts 4-digit HS headings from the HS Code tree
- Scrapes all 10-digit HS codes for each heading (with pagination support)
- Retrieves VAT rates for each HS code
- Exports results to a structured CSV file
- Built-in error handling and rate-limiting

## Installation

1. **Clone the repository**:
   ```bash
   git clone https://github.com/yourusername/hs-code-vat-scraper.git
   cd hs-code-vat-scraper
   ```

2. **Install dependencies**:
   ```bash
   pip install requests beautifulsoup4 pandas
   ```

## Usage

The script is divided into three logical components:

### 1. Extract HS Headings (4-digit)
```python
# Cell 1: Extract HS Headings
import requests
from bs4 import BeautifulSoup
import re

url = "https://www.transcustoms.com/HS_tree.htm"
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')
hs_headings = sorted(list(set(re.findall(r'Heading (\d{4}):', soup.get_text()))))
print(f"Extracted {len(hs_headings)} unique HS Headings")
```

### 2. Scrape 10-digit HS Codes
```python
# Cell 2: Scrape All HS Codes
def scrape_hs_codes(heading, max_pages=4):
    """Scrapes HS codes for a given heading across multiple pages"""
    # Implementation here
```

### 3. Fetch VAT Rates
```python
# Cell 3: Fetch VAT Rates
def fetch_vat_rate(hs_code):
    """Retrieves VAT rate for a single HS code"""
    # Implementation here
```

Run each cell sequentially to:
1. Get all HS headings
2. Find all 10-digit HS codes
3. Retrieve VAT rates and export to CSV

## Output

The final output will be saved as `hs_codes_vat_rates.csv` with the following structure:

| HS_Code      | VAT_Rate |
|--------------|----------|
| 0101210010   | 13%      |
| 0101210090   | 9%       |

## Legal Considerations
- Always check [robots.txt](https://www.transcustoms.com/robots.txt) before scraping
- Add delays between requests (`sleep(1)`) to avoid overloading servers
- Intended for educational/personal use only

## Contributing
Pull requests are welcome! For major changes, please open an issue first.

## License
[MIT](https://choosealicense.com/licenses/mit/)
```

Key improvements:
1. Added proper GitHub markdown formatting
2. Structured the content for better readability
3. Included clear installation and usage sections
4. Added license information
5. Made the legal considerations more prominent
6. Simplified some of the technical details while keeping the essential information

You can copy this directly into your README.md file. The markdown formatting will render nicely on GitHub.
